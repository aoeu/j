# just a makefile with no special magic

# list all recipies by default
default:
	@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | xargs

# make a quine and compile it
quine: create compile

# create our quine
create:
	mkdir -p tmp
	echo 'int printf(const char*, ...); int main() { char *s = "int printf(const char*, ...); int main() { char *s = %c%s%c; printf(s, 34, s, 34); return 0; }"; printf(s, 34, s, 34); return 0; }' > tmp/gen0.c

# make sure it's really a quine
compile:
	cc tmp/gen0.c -o tmp/gen0
	./tmp/gen0 > tmp/gen1.c
	cc tmp/gen1.c -o tmp/gen1
	./tmp/gen1 > tmp/gen2.c
	diff tmp/gen1.c tmp/gen2.c
	@echo 'It was a quine!'

# clean up
clean:
	rm -r tmp

# demonstrate the use of positional arguments
args:
	@echo "the first, second, and third arguments: ARG1=$$ARG1 ARG2=$$ARG2 ARG3=$$ARG3"
	@echo "all arguments are: $$ARGS"

assign_var_from_arg:
	$(eval name=${ARG1})
	@echo "assigned ARG1's value to the variable named 'name' : ${name}"

# put symlinks to must into ~/bin
install:
	mkdir -p ~/bin
	ln -s $$PWD/must ~/bin/must
	ln -s $$PWD/must ~/bin/m

uninstall:
	if test -L ~/bin/m ; then \
		READLINK=`readlink ~/bin/m` ; \
		if test $$READLINK = $$PWD/must ; then unlink ~/bin/m ; fi ; \
	fi
	if test -L ~/bin/must ; then \
		READLINK=`readlink ~/bin/must` ; \
		if test $$READLINK = $$PWD/must ; then unlink ~/bin/must ; fi ; \
	fi

version := 0.2.0
tarball := must-$(version).tar.gz
tardir  := must-$(version)

release:
	rm -f $(tarball)
	mkdir $(tardir)
	cp must $(tardir)
	tar zcvf $(tarball) $(tardir)
	rm -rf $(tardir)

checksum:
	openssl dgst -rmd160 $(tarball)
	openssl dgst -sha256 $(tarball)
